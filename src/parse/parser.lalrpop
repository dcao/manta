use super::{ast::*, context::Context, lex};

grammar<'input>(ctx: &mut Context);

pub Expr: Box<Expr<'input>> = {
    <e1: Expr2> <o: Builtin> <e2: Expr> => Box::new(Expr::Dyad(o, e1, e2)),
    <o: Builtin> <e: Expr> => Box::new(Expr::Monad(o, e)),
    Expr2,
};

Expr2: Box<Expr<'input>> = {
    "(" <Expr> ")" => <>,
    Array,
};

pub Array: Box<Expr<'input>> = int => Box::new(Expr::Array(<>));

pub Builtin: Builtin = {
    "+" => Builtin::Plus,
    "-" => Builtin::Minus,
    "*" => Builtin::Times,
    "%" => Builtin::Divide,
};

extern {
    type Location = usize;
    type Error = ();

    enum lex::Token<'input> {
         ident => lex::Token::Ident(<&'input str>),
         int => lex::Token::Integer(<i64>),
         float => lex::Token::Float(<f64>),

         "+" => lex::Token::Plus,
         "-" => lex::Token::Minus,
         "*" => lex::Token::Times,
         "%" => lex::Token::Divide,

         "(" => lex::Token::LParen,
         ")" => lex::Token::RParen,
         "[" => lex::Token::LBrack,
         "]" => lex::Token::RBrack,
    }
}
